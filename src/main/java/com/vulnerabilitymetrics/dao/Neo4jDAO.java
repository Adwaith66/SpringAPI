package com.vulnerabilitymetrics.dao;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.ssl.SSLContextBuilder;

import com.google.gson.Gson;
import com.vulnerabilitymetrics.models.Neo4jQuery;

public class Neo4jDAO {

	public static final String NEO4J_URL = "https://ida014:7473/db/data/cypher";

	public static final String username = "graph-reader";

	public static final String password = "bR1nqa4you1";

	public static HttpEntity getEntityResponse(String query) {
		Gson gson = new Gson();
		
		try {

			HttpClient httpClient = HttpClientBuilder.create()
					.setSSLContext(new SSLContextBuilder().loadTrustMaterial(null, TrustAllStrategy.INSTANCE).build())
					.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
					.setDefaultCredentialsProvider(authenticateClient()).build();
			HttpPost post = new HttpPost(Neo4jDAO.NEO4J_URL);

			StringEntity postingString = new StringEntity(gson.toJson(new Neo4jQuery(query)));
			post.setEntity(postingString);
			HttpResponse response = httpClient.execute(post);
			HttpEntity entity = response.getEntity();
			

			return entity;
		}

		catch (Exception e) {
			return null;
		}
	}

	public static CredentialsProvider authenticateClient() {
		CredentialsProvider provider = new BasicCredentialsProvider();
		UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(Neo4jDAO.username,
				Neo4jDAO.password);
		provider.setCredentials(AuthScope.ANY, credentials);

		return provider;
	}

}
