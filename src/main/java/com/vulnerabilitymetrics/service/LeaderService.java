package com.vulnerabilitymetrics.service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.vulnerabilitymetrics.dao.Neo4jDAO;
import com.vulnerabilitymetrics.models.Leader;
import com.vulnerabilitymetrics.repository.LeaderRepository;

@Service
public class LeaderService {

	@Autowired
	private LeaderRepository leaderRepository;

	public static final String getLeaders = "MATCH(u:User) WHERE u.is_vp=true return distinct u.reporting_vp";

	public static final String getPriorityForLeaders = "MATCH (o:User)<-[:owner]-(i:`Security Issue`),(o)-[:vice_president]->(vp:User) where i.issue_status = 'Active' and i.priority in ['P1', 'P2', 'P3', 'P4', 'P5', 'P6'] return vp.reporting_vp, i.priority, count(i) ORDER BY vp.reporting_vp";

	public static final String getTrendForLeaders = "MATCH (o:User)<-[:owner]-(i:`Security Issue`),(o)-[:vice_president]->(vp:User) where i.issue_status = 'Active' and i.priority in ['P1', 'P2', 'P3', 'P4', 'P5', 'P6'] return vp.reporting_vp, i.trend_type, count(i) ORDER BY vp.reporting_vp";

	public boolean getLeaders() {

		try {
			Gson gson = new Gson();

			HttpEntity entity = Neo4jDAO.getEntityResponse(getLeaders);
			JsonObject apiResponse = gson.fromJson(EntityUtils.toString(entity), JsonObject.class);
			JsonArray responseJsonArray = apiResponse.getAsJsonArray("data");

			for (JsonElement jv : responseJsonArray) {
				Leader l3Leader = new Leader(jv.toString());
				if (!leaderRepository.existsByName(l3Leader.getName()))
					leaderRepository.save(l3Leader);
			}

			return true;

		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public boolean getPriorities() throws IOException {

		try {
			Gson gson = new Gson();

			HttpEntity entity = Neo4jDAO.getEntityResponse(getPriorityForLeaders);
			JsonObject apiResponse = gson.fromJson(EntityUtils.toString(entity), JsonObject.class);
			JsonArray responseJsonArray = apiResponse.getAsJsonArray("data");


			for (JsonElement jv : responseJsonArray) {
				JsonArray priorityByLeader = jv.getAsJsonArray();
				String leaderName = new Leader(priorityByLeader.get(0).toString()).getName();

				if (!leaderRepository.existsByName(leaderName)) {
					Leader newLeader = new Leader(jv.getAsJsonArray().get(0).toString());
					leaderRepository.save(newLeader);
				}

				if (leaderRepository.existsByName(leaderName)) {
					switch (priorityByLeader.get(1).toString()) {

					case "\"P1\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP1(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"P2\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP2(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"P3\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP3(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"P4\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP4(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"P5\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP5(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"P6\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setP6(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					default:
						break;

					}

				}

			}


			return true;

		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	public boolean getTrendTypes() throws IOException {

		try {
			Gson gson = new Gson();

			HttpEntity entity = Neo4jDAO.getEntityResponse(getPriorityForLeaders);
			JsonObject apiResponse = gson.fromJson(EntityUtils.toString(entity), JsonObject.class);
			JsonArray responseJsonArray = apiResponse.getAsJsonArray("data");

			for (JsonElement jv : responseJsonArray) {
				JsonArray priorityByLeader = jv.getAsJsonArray();
				String leaderName = new Leader(priorityByLeader.get(0).toString()).getName();

				if (!leaderRepository.existsByName(leaderName)) {
					Leader newLeader = new Leader(jv.getAsJsonArray().get(0).toString());
					leaderRepository.save(newLeader);
				}

				if (leaderRepository.existsByName(leaderName)) {
					switch (priorityByLeader.get(1).toString()) {

					case "\"on_track\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setOnTrack(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"overdue\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setOverdue(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					case "\"at_risk\"":
						leaderRepository.findByName(leaderName).forEach(leader -> {
							leader.setAtRisk(priorityByLeader.get(2).getAsInt());
							leaderRepository.save(leader);
						});
						break;

					default:
						break;

					}

				}

			}

			return true;

		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}
}
